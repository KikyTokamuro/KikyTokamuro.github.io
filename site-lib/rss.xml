<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[KikyPage]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>KikyPage</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 17 Dec 2024 12:09:38 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 17 Dec 2024 12:09:32 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[2023-11-04 Смотрим картинки с Reddit в Emacs]]></title><description><![CDATA[<a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> <a href=".?query=tag:lisp" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lisp">#lisp</a> <a href=".?query=tag:emacs" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#emacs">#emacs</a>
Дело было вечером, Делать было нечего…
— Сергей Михалков
<br>Думаю не секрет, что я являюсь пользователем&nbsp;операционной системы&nbsp;текстового редактора&nbsp;<a data-tooltip-position="top" aria-label="https://www.gnu.org/software/emacs/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.gnu.org/software/emacs/" target="_self">Emacs</a>. Но при этом, я никогда не писал что-то свое с использованием&nbsp;Emacs Lisp, максимум, что делал, так это вносил различные изменения в свой&nbsp;.emacs.d&nbsp;для конфигурирования самого редактора.<br>Так как я уже использую&nbsp;Emacs&nbsp;для чтения&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/skeeto/elfeed" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/skeeto/elfeed" target="_self">RSS</a>&nbsp;и&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/emacsmirror/elpher" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/emacsmirror/elpher" target="_self">Gemini</a>, почему бы еще не просматривать свежие картинки с&nbsp;<a data-tooltip-position="top" aria-label="https://www.reddit.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.reddit.com/" target="_self">Reddit</a>&nbsp;через него, подумал я.Знакомимся с материалами по языку и в “бой”:
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.gnu.org/software/emacs/manual/html_node/eintr/" target="_self">https://www.gnu.org/software/emacs/manual/html_node/eintr/</a>
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://emacsdocs.org/docs/elisp/Emacs-Lisp" target="_self">https://emacsdocs.org/docs/elisp/Emacs-Lisp</a>
Первым делом нам надо подключить пакеты&nbsp;json&nbsp;и&nbsp;url, для того, чтобы можно было получать данные с URL и парсить JSON формат.(require 'json)
(require 'url)
Далее весь код умещается в пять функций, рассмотрим каждую из них.Функция&nbsp;my/insert-image-from-url&nbsp;предназначена для того чтобы получить изображение с URL адреса, и вставить его в текущий буфер. (defun my/insert-image-from-url (url) "Insert image from URL." (let ((buffer (url-retrieve-synchronously url))) (unwind-protect (let ((data (with-current-buffer buffer (goto-char (point-min)) (search-forward "\n\n") (buffer-substring (point) (point-max))))) (insert-image (create-image data nil t :width 200))) (kill-buffer buffer))))
В коде функции&nbsp;unwind-protect&nbsp;используется для гарантированного выполнения некоторых действий, даже если возникает ошибка или исключение. В данном случае, если возникает ошибка при получении данных изображения с URL&nbsp;unwind-protect&nbsp;гарантирует, что буфер, в котором происходит манипуляция изображением, будет убит с помощью&nbsp;kill-buffer. Таким образом,&nbsp;unwind-protect&nbsp;позволяет избежать утечек памяти и других проблем, которые могут возникнуть при непредвиденных ситуациях.Функция&nbsp;my/get-response-from-url&nbsp;предназначена для получения данных с URL и возврата их ввиде строки. Используется, чтобы получить данные от Reddit API. (defun my/get-response-from-url (url) "Get data from URL." (let ((buffer (url-retrieve-synchronously url))) (with-current-buffer buffer (unwind-protect (progn (goto-char (point-min)) (re-search-forward "^$") (buffer-substring-no-properties (point) (point-max))) (kill-buffer buffer)))))
Функция&nbsp;my/normal-image-url-p&nbsp;предназначена для проверки, является ли URL допустимым для использования в качестве изображения.(defun my/normal-image-url-p (url) "Check image URL." (and (not (string-match-p "redgifs" url)) (or (string-suffix-p ".png" url) (string-suffix-p ".gif" url) (string-suffix-p ".jpg" url) (string-suffix-p ".jpeg" url))))
Функция&nbsp;my/get-new-images-from-subreddit&nbsp;предназначена для получения списка новых постов с изображениями с указанного subreddit. Результирующий список будет содержать информацию о каждом изображении, включая заголовок поста, ссылку на изображения и ссылку на сам пост.(defun my/get-new-images-from-subreddit (sub) "Get list of SUB new images." (let* ((reddit-url "https://www.reddit.com") (url (concat reddit-url "/r/" sub "/new.json")) (json-str (my/get-response-from-url url)) (json-object (json-read-from-string json-str))) (remq nil (mapcar (lambda (child) (let* ((data (cdr (assoc 'data child))) (image-url (cdr (assoc 'url_overridden_by_dest data)))) (when (my/normal-image-url-p image-url) `((title . ,(cdr (assoc 'title data))) (image . ,image-url) (post . ,(concat reddit-url (cdr (assoc 'permalink data)))))))) (cdr (assoc 'children (cdr (assoc 'data json-object))))))))
И последняя функция&nbsp;my/show-reddit-images&nbsp;предназначена для открытия нового буфера с интересующими нас картинками. Она является интерактивной, что позволяет нам вызвать ее с помощью&nbsp;M-x&nbsp;и передать интересующий нас subreddit. (defun my/show-reddit-images (sub) "Show new image from SUB." (interactive "sEnter subreddit: ") (let ((buffer (generate-new-buffer (format "*Images [%s]*" sub)))) (with-current-buffer buffer (erase-buffer) (dolist (item (my/get-new-images-from-subreddit sub)) (dolist (key '(title post image)) (insert (concat (propertize (capitalize (symbol-name key)) 'face 'bold) ": " (cdr (assoc key item)) "\n"))) (my/insert-image-from-url (cdr (assoc 'image item))) (insert "\n\n"))) (switch-to-buffer buffer)))
<br>Итоговый результат работы всего этого в совокупности выглядит&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/KikyTokamuro/emacs-config/blob/main/elisp/reddit-images.el" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/KikyTokamuro/emacs-config/blob/main/elisp/reddit-images.el" target="_self">так</a>:<br><img alt="Pasted image 20241217143050.png" src="attachments/pasted-image-20241217143050.png" target="_self">]]></description><link>notes/2023-11-04-смотрим-картинки-с-reddit-в-emacs.html</link><guid isPermaLink="false">Notes/2023-11-04 Смотрим картинки с Reddit в Emacs.md</guid><pubDate>Tue, 17 Dec 2024 11:30:51 GMT</pubDate><enclosure url="attachments/pasted-image-20241217143050.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217143050.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2023-01-06 Рисуем Множество Мандельброта на Rein]]></title><description><![CDATA[<a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> <a href=".?query=tag:lua" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lua">#lua</a> <a href=".?query=tag:art" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#art">#art</a> Нравятся мне различные минималистичные проекты, они кажутся мне очень уютными и душевными.<br><a data-tooltip-position="top" aria-label="https://github.com/hugeping/rein" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/hugeping/rein" target="_self">Rein</a>&nbsp;как раз является одним из таких уютных проектов, позиционирует он себя как минималистичный движок для 2D-игр и демок. Кстати, автор Rein так же является автором довольно известного&nbsp;<a data-tooltip-position="top" aria-label="https://instead.hugeping.ru/" rel="noopener nofollow" class="external-link is-unresolved" href="https://instead.hugeping.ru/" target="_self">интерпретатора текстографических приключений Instead</a>.На момент написания данной заметки у Rein всего две зависимости: SDL2 и luajit. На моем стареньком синкпаде он собирается очень быстро:$ git clone https://github.com/hugeping/rein; cd rein
$ time make
cc -c src/platform.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/platform.o
cc -c src/stb_image.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/stb_image.o
cc -c src/lua-compat.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/lua-compat.o
cc -c src/stb_image_resize.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/stb_image_resize.o
cc -c src/bit.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/bit.o
cc -c src/utf.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/utf.o
cc -c src/thread.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/thread.o
cc -c src/main.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/main.o
cc -c src/gfx.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/gfx.o
cc -c src/stb_truetype.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/stb_truetype.o
cc -c src/system.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/system.o
cc -c src/gfx_font.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/gfx_font.o
cc -c src/net.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/net.o
cc -c src/zvon.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/zvon.o
cc -c src/zvon_mixer.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/zvon_mixer.o
cc -c src/zvon_sfx.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/zvon_sfx.o
cc -c src/synth.c -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" -o src/synth.o
cc -I/usr/include/SDL2 -D_REENTRANT -I/usr/include/luajit-2.1 -Wall -O3 -DVERSION=\"230106\" src/platform.o src/stb_image.o src/lua-compat.o src/stb_image_resize.o src/bit.o src/utf.o src/thread.o src/main.o src/gfx.o src/stb_truetype.o src/system.o src/gfx_font.o src/net.o src/zvon.o src/zvon_mixer.o src/zvon_sfx.o src/synth.o -lSDL2 -lluajit-5.1 -lm -o rein real	0m2,466s
user	0m1,882s
sys	0m0,559s
Запускаем тестовый пример, чтобы удостоверится, что все работает:$ ./rein demo/test.lua
<br><img alt="Pasted image 20241217142636.png" src="attachments/pasted-image-20241217142636.png" target="_self">Теперь можно попробовать написать простенькую демку. Для реализации я выбрал Множество Мандельброта.local w, h = screen:size()
local x = 0
local fps = 0 screen:clear(0) while sys.running() and x &lt;= w do for y = 0, h do local i = 0 local cx = -1.3 + x / 500 local cy = -0.55 + y / 500 local zx = 0 local zy = 0 while (i &lt;= 255) and (zx * zx + zy * zy) &lt; 6 do local xt = zx * zy zx = zx * zx - zy * zy + cx zy = 2 * xt + cy; i = i + 1 end screen:fill(x, y, 1, 1, {i, i*2, i*4}) end screen:clear(0, 256-8, 256, 256-8, 7) gfx.printf(0, 256-7, 1, "Mandelbrot FPS:%d", fps) x = x + 1 fps = gfx.flip(1/60)
end
Получившийся результат:<br>
<img alt="rein_mandelbrot.gif" src="attachments/rein_mandelbrot.gif" target="_self">Так же стоить отметить, что в Rein входит редактор исходного кода, редактор графики, редактор звука, а так же клиент IRC :)$ ./rein edit [file.lua]
$ ./rein sprited
$ ./rein voiced
$ ./rein irc
Впечатления от использования Rein складываются положительные. На него точно стоит обратить свое внимание.]]></description><link>notes/2023-01-06-рисуем-множество-мандельброта-на-rein.html</link><guid isPermaLink="false">Notes/2023-01-06 Рисуем Множество Мандельброта на Rein.md</guid><pubDate>Tue, 17 Dec 2024 11:27:37 GMT</pubDate><enclosure url="attachments/pasted-image-20241217142636.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217142636.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2022-02-16 Lisp Alien]]></title><description><![CDATA[<a href=".?query=tag:lisp" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lisp">#lisp</a> <a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> <a href=".?query=tag:art" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#art">#art</a>You must have JavaScript enabled to display the content in this note correctly<br>Once upon a time I stumbled upon a&nbsp;<a data-tooltip-position="top" aria-label="https://www.lisperati.com/#!The_Official_Lisp_Alien_3D_Model" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.lisperati.com/#!The_Official_Lisp_Alien_3D_Model" target="_self">Lisp Alien 3D Model</a>, I thought I wanted the same one, but more elaborate and with more detail accuracy.As time went on, the idea also remained somewhere in the depths of memory.<br>And recently,&nbsp;<a data-tooltip-position="top" aria-label="mailto:stanislove1199@gmail.com" rel="noopener nofollow" class="external-link" href=".html" target="_self">my friend</a>&nbsp;told me that he began to get involved in 3D modeling. I thought this was my chance to bring my old idea to life. We consulted with him a bit, discussed the details, as well as how the final model should look, and he agreed to take on this project.During the implementation of the project, it was very interesting to watch how the model develops, new details appear in it, a soul appears. From the very beginning, we wanted to make only an alien, and it will stop there.But then we decided to add various new details to it:
the pedestal on which he will stand
flag
sword and shield
brain model inside an alien… don’t ask why…
retro computer
It turned out funny with the computer model, we took the old Macintosh as a basis, and slightly changed its name to Nushtosh (Russian speakers will appreciate the joke):<br><img alt="Pasted image 20241217132114.png" src="attachments/pasted-image-20241217132114.png" target="_self">A small cut of the moments of creation can be seen in this animation:<br><img alt="process.gif" src="attachments/process.gif" target="_self">It was a very interesting and fun project, the result of which we were pleased with.Lisp Alien 3D model (you can twist and see): The pedestal 3D model (you can twist and see): Ready-made renders that can be put on the desktop wallpaper:<br><img alt="Pasted image 20241217132156.png" src="attachments/pasted-image-20241217132156.png" target="_self"><br><img alt="Pasted image 20241217132218.png" src="attachments/pasted-image-20241217132218.png" target="_self"><br>All files from this note can be found&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/KikyTokamuro/KikyTokamuro.github.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/KikyTokamuro/KikyTokamuro.github.io/" target="_self">here</a>.]]></description><link>notes/2022-02-16-lisp-alien.html</link><guid isPermaLink="false">Notes/2022-02-16 Lisp Alien.md</guid><pubDate>Tue, 17 Dec 2024 11:24:57 GMT</pubDate><enclosure url="attachments/pasted-image-20241217132114.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217132114.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2019-10-13 Raspberry Pi + Nokia 5110 LCD = ❤]]></title><description><![CDATA[<a href=".?query=tag:linux" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#linux">#linux</a> <a href=".?query=tag:device" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#device">#device</a><br><img alt="Pasted image 20241217125240.png" src="attachments/pasted-image-20241217125240.png" target="_self">Nokia 5110 LCD — это монохромный дисплей 84x48 пикселей, который использовался в старых телефонах Nokia. Основное преимущество этого дисплея — легкость в управлении.На плате модуля дисплея расположены два параллельных ряда по 8 пинов для подключения и передачи данных:
RST — Перезагрузка.
CE — Выбор чипа.
DC — Выбор режима.
DIN — Вход данных.
CLK — Вход тактового сигнала.
VCC — Питание.
LIGHT — Питание подсветки дисплея.
GND — Земля.
<br><img alt="Pasted image 20241217125302.png" src="attachments/pasted-image-20241217125302.png" target="_self">Подключение данного дисплея к Raspberry Pi осуществляется очень просто, вот по этой схеме (чтобы при подключении дисплея работала его подсветка, нужно пин LIGHT подключить на землю):<br><img alt="Pasted image 20241217125331.png" src="attachments/pasted-image-20241217125331.png" target="_self">Дальше для взаимодействия с дисплеем на Raspberry Pi нужно установить нужные библиотеки (предполагается что такие вещи как git, python-pip, python-dev, build-essential у вас уже установлены, если нет, то их тоже нужно установить):sudo apt install python-imaging
pip install RPi.GPIO
Так как взаимодействие с модулем экрана осуществляется по SPI, его так же нужно включить на Raspberry Pi. Для этого открываем файл “/boot/config.txt” и раскомментируем в нем строку:dtparam=spi=on
После этого сохраняем файл и перезагружаемся командой:sudo reboot
Чтобы проверить что SPI включено, можно воспользоваться командой:lsmod | grep "spi_bcm*"
Дальше скачиваем и устанавливаем библиотеку для взаимодействия с дисплеем Nokia 5110:git clone https://github.com/adafruit/Adafruit_Nokia_LCD
cd Adafruit_Nokia_LCD
sudo python setup.py install
Чтобы проверить то что дисплей правильно подключен и все работает, можно запустить один из примеров, из папки “Adafruit_Nokia_LCD/examples/”.А теперь попробуем написать простенькие часы для этого дисплея:#!/usr/bin/python import time
from datetime import datetime import Adafruit_Nokia_LCD as LCD
import Adafruit_GPIO.SPI as SPI from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont # Raspberry Pi hardware SPI config:
DC = 23
RST = 24
SPI_PORT = 0
SPI_DEVICE = 0 # Hardware SPI usage:
disp = LCD.PCD8544(DC, RST, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=4000000)) # Software SPI usage (defaults to bit-bang SPI interface):
#disp = LCD.PCD8544(DC, RST, SCLK, DIN, CS) # Initialize library.
disp.begin(contrast=40) # Clear display.
disp.clear()
disp.display() # Create blank image for drawing.
# Make sure to create image with mode '1' for 1-bit color.
image = Image.new('1', (LCD.LCDWIDTH, LCD.LCDHEIGHT)) # Get drawing object to draw on image.
draw = ImageDraw.Draw(image) print('Press Ctrl-C to quit.') while True: # Get current time strt = datetime.now().strftime('%H:%M:%S') # Draw a white filled box to clear the image. draw.rectangle((0,0,LCD.LCDWIDTH,LCD.LCDHEIGHT), outline=255, fill=255) # Alternatively load a TTF font. # Some nice fonts to try: http://www.dafont.com/bitmap.php font = ImageFont.truetype('game_over.ttf', 58) # Write some text. draw.text((0,0), strt, font=font) # Display image. disp.image(image) disp.display() time.sleep(1.0)
Запускается этот код командой:sudo python clock.py
Демонстрация работы получившихся часов:]]></description><link>notes/2019-10-13-raspberry-pi-+-nokia-5110-lcd-=-❤.html</link><guid isPermaLink="false">Notes/2019-10-13 Raspberry Pi + Nokia 5110 LCD = ❤.md</guid><pubDate>Tue, 17 Dec 2024 10:25:27 GMT</pubDate><enclosure url="attachments/pasted-image-20241217125240.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217125240.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2020-08-07 Golang заметки - Работа с HTML шаблонами]]></title><description><![CDATA[<a href=".?query=tag:golang" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#golang">#golang</a> <a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> Пакеты&nbsp;html&nbsp;и&nbsp;html/template&nbsp;из стандартной библиотеки обеспечивают основные возможности работы с HTML разметкой, включая применение переменных и функций в шаблонах. Пакет&nbsp;html/template&nbsp;опирается на пакет&nbsp;text/template, предназначенный для обработки текстовых шаблонов.package main import ( "html/template" "net/http"
) var tmpl = `
&lt;h1&gt;
&lt;a href="{{.Link}}"&gt;{{.Text}}&lt;/a&gt;
&lt;/h1&gt;` type page struct { Text string Link string
} func indexHandle(w http.ResponseWriter, r *http.Request) { t, _ := template.New("page").Parse(tmpl) p := page{ Text: "github", Link: "https://github.com/", } t.Execute(w, p)
} func main() { http.HandleFunc("/", indexHandle) http.ListenAndServe(":3000", nil)
}
Механизм конвейера передает вывод одного элемента конвейера следующему в последнем аргументе.package main import ( "html/template" "net/http"
) var header = `
{{define "header"}}
&lt;h1&gt;Header&lt;/h1&gt;
&lt;hr&gt;
{{end}}` var tmpl = `
{{template "header" .}}
&lt;h1&gt;
&lt;a href="{{.Link}}"&gt;{{.Text}}&lt;/a&gt;
&lt;/h1&gt;` type page struct { Text string Link string
} func indexHandle(w http.ResponseWriter, r *http.Request) { t, _ := template.New("page").Parse(header) t.Parse(tmpl) p := page{ Text: "github", Link: "https://github.com/", } t.Execute(w, p)
} func main() { http.HandleFunc("/", indexHandle) http.ListenAndServe(":3000", nil)
}
Когда шаблоны хранятся в файлах, их можно считывать такой конструкцией:template.Must(template.ParseFiles("index.html", "header.html"))
package main import ( "html/template" "net/http"
) type page struct { Text string Link string
} func indexHandle(w http.ResponseWriter, r *http.Request) { t := template.Must(template.ParseFiles("index.html", "header.html")) p := page{ Text: "github", Link: "https://github.com/", } t.ExecuteTemplate(w, "index.html", p)
} func main() { http.HandleFunc("/", indexHandle) http.ListenAndServe(":3000", nil)
}
Для обработки шаблона используется метод&nbsp;ExecuteTemplate, чтобы можно было указать имя основного шаблона. Если вызвать метод&nbsp;Execute, как в предыдущих примерах, он обработал бы первый шаблон из перечисленных в вызове функции&nbsp;ParseFiles.]]></description><link>notes/2020-08-07-golang-заметки-работа-с-html-шаблонами.html</link><guid isPermaLink="false">Notes/2020-08-07 Golang заметки - Работа с HTML шаблонами.md</guid><pubDate>Tue, 17 Dec 2024 10:20:26 GMT</pubDate></item><item><title><![CDATA[2019-10-06 Перепрошивка Nokia N900]]></title><description><![CDATA[<a href=".?query=tag:nokia" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#nokia">#nokia</a> <a href=".?query=tag:linux" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#linux">#linux</a> <a href=".?query=tag:device" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#device">#device</a> <br><img alt="Pasted image 20241217124638.png" src="attachments/pasted-image-20241217124638.png" target="_self">Предупреждение: автор не несет ответственности за причиненные повреждения вашему аппарату в процессе следования данным инструкциям. Вы все делаете на свой страх и риск.<br>Не так давно мне в руки попал знаменитый Nokia n900, я с ним всячески разбирался. Да так разбирался, что слетело ядро, и девайс впал в bootloop. Раз сломал, нужно чинить. Были найдены нужные&nbsp;<a data-tooltip-position="top" aria-label="http://talk.maemo.org/showpost.php?p=1418219&amp;postcount=13" rel="noopener nofollow" class="external-link is-unresolved" href="http://talk.maemo.org/showpost.php?p=1418219&amp;postcount=13" target="_self">файлы</a>, и&nbsp;<a data-tooltip-position="top" aria-label="https://wiki.maemo.org/User:Agge/Updating_the_firmware/rev2" rel="noopener nofollow" class="external-link is-unresolved" href="https://wiki.maemo.org/User:Agge/Updating_the_firmware/rev2" target="_self">мануал</a>&nbsp;по прошивке данного телефона.Если вкратце, то для прошивки n900, нужно 3 вещи:
Образ FIASCO aka COMBINED — в него входит rootfs, kernel, и прошивка GSM модуля (если верить вики).
Образ eMMC aka VANILLA — нужен для очистки пользовательского раздела /home (прошивку данного образа мы рассматривать не будем, так как мне это было просто не нужно. Но он прошивается почти так же как и первый).
Флешер, он же flasher-3.5 — софт с помощью которого и будем прошивать.
<br>Образы берем от&nbsp;<a data-tooltip-position="top" aria-label="https://talk.maemo.org/showpost.php?p=1418219&amp;postcount=13" rel="noopener nofollow" class="external-link is-unresolved" href="https://talk.maemo.org/showpost.php?p=1418219&amp;postcount=13" target="_self">сюда</a>, а флешер можно найти&nbsp;<a data-tooltip-position="top" aria-label="https://soft.sibnet.ru/soft/22060-maemo-flasher-3-5/" rel="noopener nofollow" class="external-link is-unresolved" href="https://soft.sibnet.ru/soft/22060-maemo-flasher-3-5/" target="_self">тут</a>. Я флешер ставил из&nbsp;<a data-tooltip-position="top" aria-label="https://aur.archlinux.org/packages/flasher/" rel="noopener nofollow" class="external-link is-unresolved" href="https://aur.archlinux.org/packages/flasher/" target="_self">AUR</a>, так как от туда еще и подтянулась нужная библиотека:yaourt flasher
Приступим к прошивке:
Переходим в директорию с образом прошивки, и выполняем команду (имя образа у вас может быть другим):sudo flasher-3.5 -F RX-51_2009SE_20.2010.36-2.003_PR_COMBINED_003_ARM.bin -f -R
Должно появится что-то на подобии:...
Suitable USB device not found, waiting
Выключаем N900, зажимаем клавишу “u” на клавиатуре девайса, и только потом подключаем USB шнур. Если вы все правильно сделали, то на экране телефона появится значок USB, а на компьютере в терминале побегут строки с информацией о перепрошивке. После этих действий телефон должен перезагрузиться, и начать работать с новой прошивкой.Но не тут то было, у меня после выполнения этих действий, в терминале выбило ошибку (не все могут с ней столкнуться, у некоторых все отлично шьется):Error claiming USB interface: Device or resource busy...
Suitable USB device not found, waiting
Решается она удалением модуля ядра:sudo modprobe -r cdc_phonet
<br>Вы так же можете столкнуться с другими ошибками, с их решением можно ознакомиться&nbsp;<a data-tooltip-position="top" aria-label="https://wiki.maemo.org/User:Agge/Updating_the_firmware/rev2/Trubleshooting" rel="noopener nofollow" class="external-link is-unresolved" href="https://wiki.maemo.org/User:Agge/Updating_the_firmware/rev2/Trubleshooting" target="_self">тут</a>.]]></description><link>notes/2019-10-06-перепрошивка-nokia-n900.html</link><guid isPermaLink="false">Notes/2019-10-06 Перепрошивка Nokia N900.md</guid><pubDate>Tue, 17 Dec 2024 10:19:17 GMT</pubDate><enclosure url="attachments/pasted-image-20241217124638.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217124638.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2019-10-06 Созданиe initramfs]]></title><description><![CDATA[<a href=".?query=tag:linux" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#linux">#linux</a> <a href=".?query=tag:kernel" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#kernel">#kernel</a>Initramfs, сокращенно от “initial RAM file system”, является приемником initrd (initial ramdisk). Это cpio (copy in and out) архив исходной файловой системы, который загружается в память во время процесса запуска Linux. Linux копирует содержимое архива в rootfs (которая может быть основана на ramfs либо на tmpfs), а затем запускает init. Init предназначен для выполнения определенных задач до того, как реальная или финальная файловая система будет установлена поверх rootfs. Таким образом, initramfs должен содержать все драйвера устройств и инструменты, необходимые для установки конечной корневой файловой системы.Скачиваем busybox (вы можете скачать более новую версию):wget https://busybox.net/downloads/busybox-1.26.2.tar.bz2
tar -xvf busybox-1.26.2.tar.bz2
Собираем busybox из исходников:cd busybox-1.26.2
make defconfig
make menuconfig
В меню Busybox Settings выбираем Build Options, и ставим галочку напротив Build BusyBox as a static binary (no shared libs). Далее указываем выходную папку для бинарников и собираем busybox.make
make CONFIG_PREFIX=./../busybox_rootfs install
Создаем иерархию каталогов для initramfs:mkdir -p initramfs/{bin,dev,etc,home,mnt,proc,sys,usr}
cd initramfs/dev
sudo mknod sda b 8 0
sudo mknod console c 5 1
Так же копируем все из папки busybox_rootfs в папку initramfs. Дальше создаем в корне initramfs файл init, и пишем в него следующее:#!/bin/sh
mount -t proc none /proc
mount -t sysfs none /sys
exec /bin/sh
И даем ему права на исполнение:chmod +x init
Создаем сам initramfs:find . -print0 | cpio --null -ov --format=newc &gt; initramfs.cpio
gzip ./initramfs.cpio
Скачиваем и собираем ядро (вы можете скачать более новую версию):wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.11.6.tar.xz
tar -xvf linux-4.11.6.tar.xz
make x86_64_defconfig
make kvmconfig
make -j2
Образ ядра будет лежать в /arch/x86_64/boot/bzImage.Дальше копируем куда-то наш initramfs и ядро, заходим в эту директорию и запускаем qemu:qemu-system-x86_64 -kernel ./bzImage -initrd ./initramfs.cpio.gz -nographic -append "console=ttyS0"
Если все было выполнено правильно, то загрузится ядро и запустится shell.]]></description><link>notes/2019-10-06-созданиe-initramfs.html</link><guid isPermaLink="false">Notes/2019-10-06 Созданиe initramfs.md</guid><pubDate>Tue, 17 Dec 2024 10:19:09 GMT</pubDate></item><item><title><![CDATA[2020-06-20 Golang заметки - Логирование]]></title><description><![CDATA[<a href=".?query=tag:golang" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#golang">#golang</a> <a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> Простейшее использование пакета log. Сообщения пишутся в&nbsp;os.Stderr:package main import ( "log"
) func main() { log.Println("Test message") log.Fatal("Fatal message") // будет выход с кодом ошибки
}
Журналирование с использование&nbsp;log.Logger, он поддерживает функции передачи данных любому объекту io.Writer, способен работать с файлами и сетевыми подключениями:package main import ( "log" "os"
) func main() { logfile, _ := os.Create("./test.log") defer logfile.Close() logger := log.New(logfile, "Prefix ", log.LstdFlags|log.Llongfile) logger.Println("Test message") logger.Fataln("Fatal message")
}
<br><img alt="Pasted image 20241217131719.png" src="attachments/pasted-image-20241217131719.png" target="_self">Пример простого журналирования с записью в сетевой сокет:package main import ( "log" "net"
) func main() { conn, err := net.Dial("tcp", "localhost:8080") if err != nil { panic("Failed to connect to localhost:8080") } defer conn.Close() logger := log.New(conn, "log: ", log.LstdFlags|log.Llongfile) logger.Println("Test log message")
}
Запись сообщений в системный журнал, с помощью&nbsp;log/syslog:package main import ( "fmt" "log" "log/syslog"
) func main() { priority := syslog.LOG_LOCAL3 | syslog.LOG_NOTICE flags := log.Ldate | log.Lshortfile logger, err := syslog.NewLogger(priority, flags) if err != nil { fmt.Printf("Can't attach to syslog: %s", err) return } logger.Println("This is a test log message.")
} // июн 19 00:55:52 kiky-aspire /tmp/go-build002934745/b001/exe/main[12988]: 2020/06/19 main.go:17: This is a test log message.
Динамическое определение вида и уровня серьезности, при записи в системный журнал:package main import ( "log/syslog"
) func main() { logger, err := syslog.New(syslog.LOG_LOCAL3, "kiky") if err != nil { panic("Cannot attach to syslog") } defer logger.Close() logger.Debug("Debug message.") logger.Notice("Notice message.") logger.Warning("Warning message.") logger.Alert("Alert message.")
}
Вывод трассировки стека в поток стандратного вывода:package main import "runtime/debug" func foo() { bar()
} func bar() { debug.PrintStack()
} func main() { foo()
} // Результат:
/*
[kiky@kiky-aspire main]$ go run main.go
goroutine 1 [running]:
runtime/debug.Stack(0xc000034778, 0xc00006af78, 0x40461f)
/usr/lib/go/src/runtime/debug/stack.go:24 +0x9d
runtime/debug.PrintStack()
/usr/lib/go/src/runtime/debug/stack.go:16 +0x22
main.bar(...)
/home/kiky/go/src/main/main.go:10
main.foo(...)
/home/kiky/go/src/main/main.go:6
main.main()
/home/kiky/go/src/main/main.go:14 +0x21
*/
]]></description><link>notes/2020-06-20-golang-заметки-логирование.html</link><guid isPermaLink="false">Notes/2020-06-20 Golang заметки - Логирование.md</guid><pubDate>Tue, 17 Dec 2024 10:18:35 GMT</pubDate><enclosure url="attachments/pasted-image-20241217131719.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217131719.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2020-08-03 Golang заметки - Кросс-платформенная компиляция]]></title><description><![CDATA[<a href=".?query=tag:golang" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#golang">#golang</a> <a href=".?query=tag:dev" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#dev">#dev</a> Очень часто бывает так, что приложение разрабатывается в одной ОС, а эксплуатироваться должно в другой, данную проблему решает кросс-платформенная компиляция.Начиная с версии 1.5 компилятор языка Go начал поддерживать кросс-платформенную компиляцию из коробки. Для этого необходимо в переменных окружения GOARCH и GOOS указать целевую архитектуру и ОС.Допустимыми комбинациями&nbsp;GOOS&nbsp;и&nbsp;GOARCH&nbsp;являются:Пример использования:package main import "fmt" func main() { fmt.Println("Hello World")
}
Собираем под Windows с 386 архитектурой:GOOS=windows GOARCH=386 go build main.go
Проверяем правильно ли собралось:$ file main.exe
main.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows
]]></description><link>notes/2020-08-03-golang-заметки-кросс-платформенная-компиляция.html</link><guid isPermaLink="false">Notes/2020-08-03 Golang заметки - Кросс-платформенная компиляция.md</guid><pubDate>Tue, 17 Dec 2024 10:18:25 GMT</pubDate></item><item><title><![CDATA[2019-09-08 Использования Proxmark3 для клонирования пропуска через турникет]]></title><description><![CDATA[<a href=".?query=tag:proxmark3" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#proxmark3">#proxmark3</a> <a href=".?query=tag:rfid" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#rfid">#rfid</a> <a href=".?query=tag:linux" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#linux">#linux</a> <a href=".?query=tag:device" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#device">#device</a>Пришла моя заветная посылка с “Proxmark3 Easy”. Если вкратце, то Proxmark3 — это мощный RFID инструмент, предназначенный для отслеживания, прослушивания и эмуляции всего, от низкочастотных (125 кГц) до высокочастотных (13,56 МГц) меток.<br><img alt="Pasted image 20241217122828.png" src="attachments/pasted-image-20241217122828.png" target="_self">Перед тем как вы продолжите читать, спешу вас предупредить: Данная статья написана только для ознакомления, и ни в коем случае не призывает заниматься подделкой RFID меток, так как это противоречит УК РФ. Автор не несет ответственности за любые неправомерные действия, совершенные людьми с использованием информации из данной статьи.<br>Данная статья предполагает, что вы уже установили нужную прошивку на ваш Proxmark3 и умеете запускать утилиту для работы с ним, если нет то переходим <a class="internal-link" data-href="сюда]" href=".html" target="_self" rel="noopener nofollow">https://github.com/Proxmark/proxmark3</a> и читаем.Ну что, приступим к исследованию RFID меток.<br>В моем учебном учреждении при входе стоят турникеты, и для того, чтобы пройти нужно приложить свой пропуск. И так как я часто забывал пропуск, я решил скопировать его на брелок T5577, который шел в комплекте к Proxmark3. Подобные брелоки можно найти на <a class="internal-link" data-href="AliExpress" href=".html" target="_self" rel="noopener nofollow">https://aliexpress.ru/wholesale?SearchText=t5577</a>.С начало нужно узнать, что за тип метки используется в пропуске, для этого прикладываем его к считывателю и запускаем утилиту proxmark3:./proxmark3 /dev/ttyACM0
Как утилита запуститься вводим:proxmark3&gt; lf search
После того как произойдет обнаружение пропуска, можно увидеть подобный текст:Checking for known tags:
EM410x pattern found:
EM TAG ID : 1234567890
...
В данном случае, мой пропуск оказался меткой типа EM410x с ID 1234567890 (понадобиться для копирования). EM410x — это формат RFID меток компании EM Microelectronic-Marin. Данная метка относиться к классу пассивных RFID меток, поскольку не имеет встроенного источника питания. Работает в частотном диапазоне 125 КГц.Далее, запоминаем ID метки, и прикладываем к считывателю брелок, на который будем клонировать пропуск. И вводим команду:proxmark3&gt; lf em 410xwrite 1234567890 1
После этого можно увидеть:Writing T55x7 tag with UID 0x1234567890 (clock rate: 64)
#db# Started writing T55x7 tag ...
#db# Clock rate: 64
Это говорит нам о том, что метка успешно скопировалась. Можно смело идти на учебу и проверять, заранее скажу что все отлично сработало ;)Ссылки на тему исследования RFID меток:
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://habr.com/ru/post/325776/" target="_self">https://habr.com/ru/post/325776/</a>
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.securitylab.ru/analytics/458814.php" target="_self">https://www.securitylab.ru/analytics/458814.php</a>
]]></description><link>notes/2019-09-08-использования-proxmark3-для-клонирования-пропуска-через-турникет.html</link><guid isPermaLink="false">Notes/2019-09-08 Использования Proxmark3 для клонирования пропуска через турникет.md</guid><pubDate>Tue, 17 Dec 2024 09:45:29 GMT</pubDate><enclosure url="attachments/pasted-image-20241217122828.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/pasted-image-20241217122828.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Curriculum Vitae]]></title><description><![CDATA[Period: June 2024 - Currently
Position: Tech Lead / Developer
Type: Full time
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://bizzup.ru/" target="_self">https://bizzup.ru/</a>
Developing projects for client tasks.
Developing integration with “Bitrix24”.
Period: September 2023 - June 2024
Position: Lecturer
Type: Contract work<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://polytech21.ru/" target="_self">https://polytech21.ru/</a>
Teaching programming courses (Python, Pascal).
Period: August 2023 - June 2024
Position: Developer
Type: Full time<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="http://dora.bz/" target="_self">http://dora.bz/</a>
Development of firmware for the smart door controller based on FreeRTOS.
Implementation of Modbus protocol support.
Implementation of Wiegand protocol support.
Implementation of iButton readers (1-Wire) support.
Development of an MVP mobile application for interaction with the controller via BLE.
Technology stack used in development: C, C++, Golang, Make, CMake, ESP-IDF, FreeRTOS.
Period: January 2023 - August 2023
Position: Web Developer
Type: Full time<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://dorren.ru/" target="_self">https://dorren.ru/</a>
Development of the server part of the access control and management system.
Development of firmware for the smart door controller based on FreeRTOS.
Development of a system for storing controller events in Flash memory.
Development of modules for interaction of the controller with various peripherals (LCD, SD, Camera, etc.).
CI setup based on Github Actions.
Technology stack used in development: Golang, C, C++, Make, CMake, ESP-IDF, FreeRTOS.
Period: June 2023 - August 2023
Position: Developer
Type: Contract work<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://intiit.ru/" target="_self">https://intiit.ru/</a>
Development of a geographic information system.
Database design.
Development of API request handlers.
Development of a user system (a system of roles, an authorization system linked to a company, a system for monitoring and limiting the number of user requests).
Development of a system of interaction between companies, users and cities.
Development of an intuitive interface for automatic collection of geoinformation data.
Implementation of a caching system for searching geoinformation data.
Setting up deployment automation and application management using containerization.
Technology stack used in development: Golang, JavaScript, PostgreSQL, Nginx, Grafana, Redis, Docker.
Period: September 2022 - June 2023
Position: Lecturer
Type: Contract work<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://polytech21.ru/" target="_self">https://polytech21.ru/</a>
Teaching programming courses (Python, Pascal).
Period: July 2021 - December 2022
Position: Fullstack Web Developer
Type: Full time<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://cmdf5.ru/" target="_self">https://cmdf5.ru/</a>
Developing projects for client tasks.
Developing site integration with “amoCRM”.
Developing a system for providing technical support.
Developing a system for copying transactions in “amoCRM” with history.
Developing a system for generating various documents: invoices, commercial offers, etc.
Technology stack used in development: PHP, JavaScript, JQuery, MySQL, MongoDB, Redis.
Period: November 2020 - July 2021
Position: Technician-programmer
Type: Full time<br>
Web-Site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.dynamics.com.ru/" target="_self">https://www.dynamics.com.ru/</a>
Developing patches that add new functionality to U-Boot.
Developing a utility for interacting with OP-TEE (Arm TrustZone) Secure Storage.
Developing REST API based on microservice architecture, in the Golang programming language.
Developing various shell scripts for automated routine tasks.
Period: … - November 2020
Bug Hunting <br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://yandex.ru/bugbounty/i/hall-of-fame/" target="_self">https://yandex.ru/bugbounty/i/hall-of-fame/</a>
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.openbugbounty.org/researchers/KikyTokamuro/" target="_self">https://www.openbugbounty.org/researchers/KikyTokamuro/</a> Period: 2023 - Now
Specialty: Informatics and Computer Engineering (Master’s degree)<br>
Web-site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://mospolytech.ru/" target="_self">https://mospolytech.ru/</a>Period: 2019 - 2023
Specialty: Informatics and Computer Engineering (Bachelor’s degree)<br>
Web-site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://mospolytech.ru/" target="_self">https://mospolytech.ru/</a>Period: 2015 - 2019
Specialty: Computer systems technician<br>
Web-site:&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="http://www.chemk.org/" target="_self">http://www.chemk.org/</a>
Developing backends using Golang and PHP
Working with data transfer protocols: HTTP, TCP, MQTT, gRPC, etc
Single Page Application development based on jQuery and JavaScript
Experience of using MySQL, SQLite, MongoDB, PostgreSQL, Redis
Basic web design
Some experience in Pentesting and Bug Hunting
Experience of using programming languages as hobby: Common Lisp, Scheme
Experience in system software development for GNU/Linux using C programming language
Experience with build automation tools: Make, CMake
Basic experience in embedded software development in C/C++ and FreeRTOS (ESP-IDF)
Experience of using version control systems: Git
Basic experience with Docker, Docker Compose
Comfortable working in a GNU/Linux environment
Comfortable working in GNU Emacs Russian - Native
English - Reading documentation
]]></description><link>curriculum-vitae.html</link><guid isPermaLink="false">Curriculum Vitae.md</guid><pubDate>Tue, 17 Dec 2024 09:26:28 GMT</pubDate></item><item><title><![CDATA[index]]></title><description><![CDATA[Hey, I’m Arkhangelsky Daniil aka Kiky Tokamuro, a Software Engineer.At work, I mainly specialize in&nbsp;C,&nbsp;PHP,&nbsp;Golang. But in my spare time, I like to work with&nbsp;Lisp,&nbsp;Python, and many others. Most of my non-work focus is in Programming Language theory, Operation System theory, and Developer tooling.You can find all my projects and research on my&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/KikyTokamuro" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/KikyTokamuro" target="_self">GitHub</a>.<br>If you have a position or project that you think might fit me, please send me an&nbsp;<a data-tooltip-position="top" aria-label="mailto:kiky.tokamuro@yandex.ru" rel="noopener nofollow" class="external-link" href=".html" target="_self">Email</a>, or give my&nbsp;<a data-href="Curriculum Vitae" href="curriculum-vitae.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Curriculum Vitae</a>&nbsp;to someone.<br>I also occasionally post interesting posts to&nbsp;<a data-tooltip-position="top" aria-label="https://mastodon.social/@kikytokamuro" rel="noopener nofollow" class="external-link is-unresolved" href="https://mastodon.social/@kikytokamuro" target="_self">Mastodon</a>.Outside of work and Open-Source, I like to work on my house, hangout with my wife, and read. I mostly read Novels and Fantasy books, but I’ll never say no to a good software or hardware book.]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Tue, 17 Dec 2024 09:08:12 GMT</pubDate></item></channel></rss>